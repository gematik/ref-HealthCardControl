@startuml

  package de.gematik.ti.healthcard.control {
      class CardDetector {
          {static} - LOG : Logger
          {static} - TAG : String
          {static} - RECEIVE_BUFFER_SIZE : int
          {static} - instance : CardDetector
          - healthCardMap : Map<ICardReader, IHealthCard>
          - CardDetector()
          {static} + getInstance()
          {static} + startDetection()
          {static} + stopDetection()
          - register()
          - unregister()
          + handleCardPresentEvents()
          - createHealthCardWithTypeAndSendEvent()
          - extractCardType()
          - sendEvent()
          - createPresentEventForHealthCardType()
          - getHealthCardTypeSmcb()
          - getHealthCardTypeHba()
          - getHealthCardTypeForEgk()
          + handleCardAbsentEvents()
          - sendCardAbsentEvent()
          + handleCardReaderDisconnectedEvents()
          - createAbsentEventForHealthCardType()
      }
    }


    package de.gematik.ti.healthcard.control {
      enum CARD_TYPE {
        EGK
        HBA
        SMCB
        UNKNOWN
      }
    }


    package de.gematik.ti.healthcard.control {
      class CardGenerationExtractor {
          {static} + RADIX_16 : int
          {static} + MIN_VERSION_LENGTH : int
          + getCardGeneration()
          + getCardGeneration()
          - convertToInt()
          - check()
      }
    }


    package de.gematik.ti.healthcard.control {
      class HealthCardControl {
          {static} - LOG : Logger
          {static} - TAG : String
          {static} - instance : HealthCardControl
          - HealthCardControl()
          {static} + getInstance()
          {static} + start()
          {static} + stop()
      }
    }


    package de.gematik.ti.healthcard.control {
      class TrustedChannelPaceKeyRequestHandler {
          {static} - LOG : Logger
          {static} - TAG : String
          {static} - instance : TrustedChannelPaceKeyRequestHandler
          - TrustedChannelPaceKeyRequestHandler()
          {static} + getInstance()
          {static} + startHandling()
          {static} + stopHandling()
          - register()
          - unregister()
          + handleRequestPaceKeyEvent()
      }
    }



    package de.gematik.ti.healthcard.control {
        package events {
            package healthcard {
                package absent {
                }
                package present {
                }
            }
        }
    }


    package de.gematik.ti.healthcard.control {
        package security {
        }
    }

        package de.gematik.ti.healthcard.control {
            package c2c {
            }
        }

    package de.gematik.ti.healthcard.control {
            package nfdm {
            }
    }

    package de.gematik.ti.healthcard.control {
                package protocol {
                }
    }

  CardDetector +-down- CARD_TYPE
  CardDetector ..> CardGenerationExtractor
  HealthCardControl ..> CardDetector
  HealthCardControl ..> TrustedChannelPaceKeyRequestHandler
  TrustedChannelPaceKeyRequestHandler ..> de.gematik.ti.healthcard.control.security

@enduml
