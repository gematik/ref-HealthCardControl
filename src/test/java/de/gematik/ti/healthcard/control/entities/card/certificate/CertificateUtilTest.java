/*
 * Copyright (c) 2020 gematik GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package de.gematik.ti.healthcard.control.entities.card.certificate;

import java.security.cert.X509Certificate;

import org.hamcrest.core.Is;
import org.junit.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.gematik.ti.utils.codec.Hex;

/**
 * TODO: move to TIUTILS
  */
public class CertificateUtilTest {
    private static final Logger LOG = LoggerFactory.getLogger(CertificateUtilTest.class);

    @Test
    public void testGetActorNameHbaElc() {
        String stringCert
        byte[] bytes = Hex.decode(stringCert);
        X509Certificate certificate = CertificateUtil.getCertificate(bytes);

        String result = CertificateUtil.getSurnameGivenname(certificate);
        Assert.assertThat(result, Is.is("(Niño Gômez, Lukas y)"));
    }

    @Test
    public void testGetActorNameHbaRsa() {
        String stringCert
        byte[] bytes = Hex.decode(stringCert);
        X509Certificate certificate = CertificateUtil.getCertificate(bytes);

        String result = CertificateUtil.getSurnameGivenname(certificate);
        Assert.assertThat(result, Is.is("(Niño Gômez, Lukas y)"));

        //
        stringCert
        bytes = Hex.decode(stringCert);
        certificate = CertificateUtil.getCertificate(bytes);

        result = CertificateUtil.getSurnameGivenname(certificate);
        Assert.assertThat(result, Is.is("(Goerlitzer, Ullrich)"));
    }

    @Test
    public void testGetActorNameSmcbElc() {
        String stringCert
        byte[] bytes = Hex.decode(stringCert);
        X509Certificate certificate = CertificateUtil.getCertificate(bytes);

        String result = CertificateUtil.getCommonName(certificate);
        Assert.assertThat(result, Is.is("GEM.SMCB-CA9 TEST-ONLY"));
    }

    @Test
    public void testGetActorNameSmacbRsa() {
        String stringCert
        byte[] bytes = Hex.decode(stringCert);
        X509Certificate certificate = CertificateUtil.getCertificate(bytes);

        String result = CertificateUtil.getCommonName(certificate);
        Assert.assertThat(result, Is.is("GEM.SMCB-CA4 TEST-ONLY"));
    }
}
